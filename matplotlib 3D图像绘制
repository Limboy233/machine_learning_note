这是根据B站 刘二大人 的 <<深度学习pytorch实战教程>> 的第二讲线性模型的作业引出的
而且借鉴了该博客的想法:https://blog.csdn.net/mahoon411/article/details/121139438
matplotlib官方3D绘图教程:https://matplotlib.org/stable/gallery/mplot3d/subplot3d.html

第二讲线性模型的作业Code:
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm

x_data = [1.0,2.0,3.0]
y_data = [2.0,4.0,6.0]
train_set = len(x_data) 
large = train_set 

def forward(x):
    return x*w+b

def loss(x,y):
    y_pred = forward(x)
    return (y_pred - y) * (y_pred -y)

def turn(A):
    for i in range(len(A[0])):
        for j in range(i,len(A)):
            A[i][j]=A[j][i]
    return A

w_list = []
b_list = []
mes_list = []

for w in np.arange(0.0,4.1,0.1):
    for b in np.arange(-2.0,2.1,0.1):
        print('\t','w=',w,'b=',b)
        l_sum=0
        for (x_val,y_val) in zip(x_data,y_data):
            y_pred_val = forward(x_val)
            loss_val = loss(x_val,y_val)
            l_sum +=loss_val
            print('\t' ,x_val,y_pred_val,loss_val)
        print(f'MSE={l_sum/large}')
        w_list.append(w)
        b_list.append(b)
        mes_list.append(l_sum/large)

-------------------------------------下方是最关键的绘图
#第一步设置图像参数:# set up a figure twice as wide as it is tall
fig = plt.figure(figsize=plt.figaspect(0.5)) 
#第二步设置3D图像中心轴:
ax = fig.add_subplot(1, 2, 1, projection='3d') #

在3D图的绘制中如果我们是以一维列表的形式记录我们的下xyz三轴数据,并其以一一对应的方式记录下来的,那
我们可以用这些数据画出散点图(因为这十分方便而且精确)
使用函数scatter(x,y,z){参数x,y,z均为一维数组}.
#三维散点图
ax.scatter(w_list,b_list,mes_list)

接下来就是比较复杂的三维曲面绘图:
#三维曲面图绘画

在该任务中,我通过双循环获得了记录w_list,b_list,mes_list

我们实际想要的X,Y,Z数据是那种一一对应的一列数据,而w_list,b_list中有很多重复的数据,
所以我们最好重新生成一份X,Y
#key: X,Y(meshgrid的思想),Z维信息如何生成(Z 要矩阵形式)
X = np.arange(0.0,4.1,0.1) #w
Y = np.arange(-2.0,2.1,0.1) #b
X,Y = np.meshgrid(X,Y)

我们定好X,Y直接调用织网函数(X,Y = np.meshgrid(X,Y))可以直接当成固定步骤
此时我们的数据应该是:
(此处X,Y是织网前的形态,织网后会变成两个二维数组,两矩阵对应位置的元素构成一个目标点,
故Z也要是一个二维数组其对应位置元素为XY对应取值)
X=x1,x2,x3,....
Y=y1,y2,y3,...
Z=z1,z2,z3,...
--->
       x1  x2   x3  x4 ...
  y1 [[z1  z2   z3  z4...],
  y2  [     ...          ],  
  y3          .
  y3          .
  .            .
  .                      ]]

上面就是Z对应的二维数组形式.

但我们一般记录的时候z是以一维数组的时候记录的,那我们就要用numpy的函数reshape让其变为二维数组
z.reshape(len(X),len(Y),order='F'),reshape（row，col,order),其中我们还要注意一下变换排列顺序准则
order:C 是按照行顺序， F 是按照列顺序，A 就是按照数据在内存中存储的顺序来。

(tips:如果怕画错可以先用散点图画出一个绝对准确的图然后自己再慢慢调整曲面图和他一致)
(tips:有时候Z矩阵可能还要转置调整,我写了一个turn函数(比较简单可以自己写的 :)))
z = np.array(mes_list)
print(len(mes_list))
Z = z.reshape(len(X),len(Y),order='F')#-1 表示列数自动计算 此处还要order F(竖着摆!!!!!!!!)
print(Z)
print(X)
print(Y)
#第一种曲面图(只有线的)
#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)
#第二种曲面图(还有涂色的)
surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)
fig.colorbar(surf, shrink=0.5, aspect=10)

#设置坐标轴名称
ax.set_xlabel('w')
ax.set_ylabel('b')
ax.set_zlabel('LOSS')

plt.show()



